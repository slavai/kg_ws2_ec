'use client'

import React, { useRef, useEffect, useCallback } from 'react'

interface GameObject {
  x: number
  y: number
  vx: number
  vy: number
  size: number
  active: boolean
}

interface Ship extends GameObject {
  angle: number
  thrust: number
  drag: number
}

interface Meteor extends GameObject {
  rotationSpeed: number
  rotation: number
}

interface Bullet extends GameObject {
  damage: number
  life: number
}

interface Explosion {
  x: number
  y: number
  particles: Array<{
    x: number
    y: number
    vx: number
    vy: number
    life: number
    maxLife: number
    size: number
  }>
}

export default function SpaceGameCanvas() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const animationFrameRef = useRef<number>(0)
  const gameStateRef = useRef({
    ship: {
      x: 100,
      y: 100,
      vx: 0,
      vy: 0,
      angle: 0,
      thrust: 0.23,      // +50% —Å–∫–æ—Ä–æ—Å—Ç–∏ (0.15 * 1.5)
      drag: 0.88,        // –º–µ–Ω—å—à–µ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      size: 15,          // –Ω–µ–º–Ω–æ–≥–æ –∫—Ä—É–ø–Ω–µ–µ –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
      active: true
    } as Ship,
    meteors: [] as Meteor[],
    bullets: [] as Bullet[],
    explosions: [] as Explosion[],
    mouse: { x: 100, y: 100 },
    lastMeteorSpawn: 0,
    lastBulletFired: 0,
    score: 0,
    asteroidsDestroyed: 0,
    lastScoreAnimation: 0,
    scoreAnimationScale: 1
  })

  // üïπÔ∏è –†–µ—Ç—Ä–æ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ (–≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞ 80-—Ö)
  const colors = {
    primary: '#00ccff',     // neon-blue - –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –∫–∞–∫ –≤ —Å—Ç–∞—Ä—ã—Ö –∞—Ä–∫–∞–¥–∞—Ö
    dim: '#0066aa',         // –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π —Å–∏–Ω–∏–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    bright: '#66ddff'       // —è—Ä–∫–∏–π –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
  }

  // üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
  const updateShip = useCallback((ship: Ship, mouseX: number, mouseY: number, canvas: HTMLCanvasElement) => {
    const dx = mouseX - ship.x
    const dy = mouseY - ship.y
    const distance = Math.sqrt(dx * dx + dy * dy)
    
    if (distance > 5) {
      // üéØ –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –°–ö–û–†–û–°–¢–¨: —á–µ–º –¥–∞–ª—å—à–µ –∫—É—Ä—Å–æ—Ä, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –ª–µ—Ç–∏–º!
      const minThrust = 0.15   // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
      const maxThrust = 0.45   // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å  
      const maxDistance = 300  // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
      
      // –í—ã—á–∏—Å–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π thrust –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
      const thrustMultiplier = Math.min(distance / maxDistance, 1)
      const adaptiveThrust = minThrust + (maxThrust - minThrust) * thrustMultiplier
      
      // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –∫—É—Ä—Å–æ—Ä—É —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
      ship.vx += (dx / distance) * adaptiveThrust
      ship.vy += (dy / distance) * adaptiveThrust
      
      // –ü–æ–≤–æ—Ä–æ—Ç –∫–æ—Ä–∞–±–ª—è
      ship.angle = Math.atan2(dy, dx)
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–µ–Ω–∏–µ (—á—É—Ç—å –º–µ–Ω—å—à–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
    ship.vx *= 0.9
    ship.vy *= 0.9
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    ship.x += ship.vx
    ship.y += ship.vy
    
    // –ì—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞ —Å "–æ—Ç—Å–∫–æ–∫–æ–º"
    if (ship.x < 0) { ship.x = 0; ship.vx *= -0.5 }
    if (ship.x > canvas.width) { ship.x = canvas.width; ship.vx *= -0.5 }
    if (ship.y < 0) { ship.y = 0; ship.vy *= -0.5 }
    if (ship.y > canvas.height) { ship.y = canvas.height; ship.vy *= -0.5 }
  }, [])

  // ‚òÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–µ–æ—Ä–∏—Ç–∞ (–∫–∞–∫ –≤ Asteroids)
  const createMeteor = useCallback((canvas: HTMLCanvasElement): Meteor => {
    return {
      x: Math.random() * canvas.width,
      y: -30,
      vx: (Math.random() - 0.5) * 0.5,  // –ø–æ—á—Ç–∏ —Å—Ç—Ä–æ–≥–æ –≤–Ω–∏–∑, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
      vy: 2 + Math.random() * 2,        // –±—ã—Å—Ç—Ä–µ–µ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
      size: 12 + Math.random() * 16,    // —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
      rotation: 0,
      rotationSpeed: (Math.random() - 0.5) * 0.15,
      active: true
    }
  }, [])

  // ‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∏-–ª–∏–Ω–∏–∏ (–∫–∞–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –∏–≥—Ä–∞—Ö)
  const createBullet = useCallback((ship: Ship): Bullet => {
    return {
      x: ship.x,
      y: ship.y,
      vx: Math.cos(ship.angle) * 12,  // –±—ã—Å—Ç—Ä–µ–µ
      vy: Math.sin(ship.angle) * 12,
      size: 2,
      damage: 1,
      life: 120,  // –¥–æ–ª—å—à–µ –∂–∏–≤–µ—Ç, –ª–µ—Ç–∏—Ç –¥–æ –∫—Ä–∞—è —ç–∫—Ä–∞–Ω–∞
      active: true
    }
  }, [])

  // üí• –°–æ–∑–¥–∞–Ω–∏–µ –≤–∑—Ä—ã–≤–∞
  const createExplosion = useCallback((x: number, y: number): Explosion => {
    const particles = []
    for (let i = 0; i < 8; i++) {
      const angle = (Math.PI * 2 * i) / 8
      const speed = 2 + Math.random() * 4
      particles.push({
        x,
        y,
        vx: Math.cos(angle) * speed,
        vy: Math.sin(angle) * speed,
        life: 20 + Math.random() * 20,
        maxLife: 40,
        size: 2 + Math.random() * 3
      })
    }
    return { x, y, particles }
  }, [])

  // üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–µ–ª—å–±–∞
  const autoShoot = useCallback((gameState: typeof gameStateRef.current, now: number) => {
    const { ship, meteors, bullets } = gameState
    
    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Ç–µ–æ—Ä–∏—Ç
    let nearestMeteor: Meteor | null = null
    let nearestDistance = 120 // —Ä–∞–¥–∏—É—Å –∞–≤—Ç–æ—Å—Ç—Ä–µ–ª—å–±—ã
    
    meteors.forEach(meteor => {
      if (!meteor.active) return
      const dx = meteor.x - ship.x
      const dy = meteor.y - ship.y
      const distance = Math.sqrt(dx * dx + dy * dy)
      
      if (distance < nearestDistance) {
        nearestDistance = distance
        nearestMeteor = meteor
      }
    })
    
    // –°—Ç—Ä–µ–ª—è–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 200–º—Å
    if (nearestMeteor && now - gameState.lastBulletFired > 200) {
      // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–æ—Ä–∞–±–ª—å –∫ —Ü–µ–ª–∏  
      const target = nearestMeteor as Meteor // —è–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
      const dx = target.x - ship.x
      const dy = target.y - ship.y
      ship.angle = Math.atan2(dy, dx)
      
      bullets.push(createBullet(ship))
      gameState.lastBulletFired = now
    }
  }, [createBullet])

  // üöÄ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª—è –≤ —Å—Ç–∏–ª–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏ (Asteroids)
  const drawShip = useCallback((ctx: CanvasRenderingContext2D, ship: Ship) => {
    ctx.save()
    ctx.translate(ship.x, ship.y)
    ctx.rotate(ship.angle)
    
    // –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ –±–µ–∑ –∑–∞–ª–∏–≤–∫–∏
    ctx.shadowColor = colors.primary
    ctx.shadowBlur = 3
    ctx.strokeStyle = colors.primary
    ctx.lineWidth = 2
    ctx.fillStyle = 'transparent'
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö Asteroids)
    ctx.beginPath()
    ctx.moveTo(12, 0)      // –Ω–æ—Å –∫–æ—Ä–∞–±–ª—è
    ctx.lineTo(-8, -6)     // –ª–µ–≤–æ–µ –∫—Ä—ã–ª–æ
    ctx.lineTo(-8, 6)      // –ø—Ä–∞–≤–æ–µ –∫—Ä—ã–ª–æ
    ctx.closePath()
    ctx.stroke()           // —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—É—Ä, –±–µ–∑ –∑–∞–ª–∏–≤–∫–∏
    
    ctx.restore()
  }, [colors])

  // ‚òÑÔ∏è –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ (–≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞)
  const drawMeteor = useCallback((ctx: CanvasRenderingContext2D, meteor: Meteor) => {
    ctx.save()
    ctx.translate(meteor.x, meteor.y)
    ctx.rotate(meteor.rotation)
    
    // –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö Asteroids
    ctx.shadowColor = colors.primary
    ctx.shadowBlur = 2
    ctx.strokeStyle = colors.primary
    ctx.lineWidth = 1.5
    ctx.fillStyle = 'transparent'
    
    // –ù–µ—Ä–æ–≤–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω (—Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —É–≥–ª–æ–≤)
    ctx.beginPath()
    const sides = 8
    for (let i = 0; i < sides; i++) {
      const angle = (Math.PI * 2 * i) / sides
      // –°–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ä–∞–¥–∏—É—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞
      const radiusVariation = 0.7 + Math.sin(meteor.rotation * 2 + i * 1.3) * 0.4
      const radius = meteor.size * radiusVariation
      const x = Math.cos(angle) * radius
      const y = Math.sin(angle) * radius
      if (i === 0) ctx.moveTo(x, y)
      else ctx.lineTo(x, y)
    }
    ctx.closePath()
    ctx.stroke()  // —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—É—Ä
    
    ctx.restore()
  }, [colors])

  // ‚ö° –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—É–ª–∏-–ª–∏–Ω–∏–∏ (–≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞)
  const drawBullet = useCallback((ctx: CanvasRenderingContext2D, bullet: Bullet) => {
    ctx.save()
    
    // –õ–∏–Ω–∏—è —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –¥–≤–∏–∂–µ–Ω–∏—è
    ctx.shadowColor = colors.bright
    ctx.shadowBlur = 3
    ctx.strokeStyle = colors.bright
    ctx.lineWidth = 2
    ctx.lineCap = 'round'
    
    ctx.beginPath()
    // –õ–∏–Ω–∏—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–æ —Ç–µ–∫—É—â–µ–π
    const prevX = bullet.x - bullet.vx * 0.5
    const prevY = bullet.y - bullet.vy * 0.5
    ctx.moveTo(prevX, prevY)
    ctx.lineTo(bullet.x, bullet.y)
    ctx.stroke()
    
    ctx.restore()
  }, [colors])

  // üí• –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–∑—Ä—ã–≤–∞ (–≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã)
  const drawExplosion = useCallback((ctx: CanvasRenderingContext2D, explosion: Explosion) => {
    explosion.particles.forEach(particle => {
      if (particle.life <= 0) return
      
      const alpha = particle.life / particle.maxLife
      ctx.save()
      ctx.shadowColor = colors.bright
      ctx.shadowBlur = 4
      ctx.strokeStyle = colors.bright + Math.floor(alpha * 255).toString(16).padStart(2, '0')
      ctx.lineWidth = alpha * 2
      ctx.lineCap = 'round'
      
      // –ú–∞–ª–µ–Ω—å–∫–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ –≤–º–µ—Å—Ç–æ –∫—Ä—É–≥–æ–≤
      ctx.beginPath()
      ctx.moveTo(particle.x - particle.size/2, particle.y)
      ctx.lineTo(particle.x + particle.size/2, particle.y)
      ctx.moveTo(particle.x, particle.y - particle.size/2)
      ctx.lineTo(particle.x, particle.y + particle.size/2)
      ctx.stroke()
      ctx.restore()
    })
  }, [colors])

  // üéÆ –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
  const gameLoop = useCallback(() => {
    const canvas = canvasRef.current
    const ctx = canvas?.getContext('2d')
    if (!canvas || !ctx) return

    const gameState = gameStateRef.current
    const now = Date.now()

    // –û—á–∏—Å—Ç–∫–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º "–≤—ã–≥–æ—Ä–∞–Ω–∏—è" —ç–∫—Ä–∞–Ω–∞ (–º–µ–Ω—å—à–µ alpha = –¥–æ–ª—å—à–µ —Å–ª–µ–¥—ã)
    ctx.fillStyle = 'rgba(0, 8, 16, 0.05)'  // —Å–ª–∞–±–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è persistence —ç—Ñ—Ñ–µ–∫—Ç–∞
    ctx.fillRect(0, 0, canvas.width, canvas.height)

    // üì∫ –†–∏—Å—É–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—É—é CRT —Å–µ—Ç–∫—É –ø—Ä—è–º–æ –Ω–∞ canvas
    ctx.save()
    ctx.strokeStyle = 'rgba(0, 200, 255, 0.05)'
    ctx.lineWidth = 0.5
    ctx.globalCompositeOperation = 'screen'
    
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç–∫–∏
    for (let y = 0; y < canvas.height; y += 3) {
      ctx.beginPath()
      ctx.moveTo(0, y)
      ctx.lineTo(canvas.width, y)
      ctx.stroke()
    }
    
    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –ø–æ–ª–æ—Å—ã (—Ä–µ–∂–µ)
    ctx.strokeStyle = 'rgba(0, 180, 255, 0.04)'
    for (let x = 0; x < canvas.width; x += 4) {
      ctx.beginPath()
      ctx.moveTo(x, 0)
      ctx.lineTo(x, canvas.height)
      ctx.stroke()
    }
    
    ctx.restore()

    // üì∫ CRT –ü–û–ú–ï–•–ò –ò –ò–ù–¢–ï–†–§–ï–†–ï–ù–¶–ò–Ø (–∫–∞–∫ –Ω–∞ —Å—Ç–∞—Ä—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö)
    ctx.save()
    
    // 1. –°–ª—É—á–∞–π–Ω—ã–π –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —à—É–º (–∫–∞–∂–¥—ã–µ 3-4 –∫–∞–¥—Ä–∞)
    if (Math.random() < 0.3) {
      for (let i = 0; i < 8; i++) {
        const x = Math.random() * canvas.width
        const y = Math.random() * canvas.height
        const size = 1 + Math.random() * 2
        
        ctx.fillStyle = Math.random() > 0.7 ? 
          'rgba(255, 255, 255, 0.6)' : 'rgba(0, 200, 255, 0.4)'
        ctx.fillRect(x, y, size, size)
      }
    }
    
    // 2. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ—Å—ã –ø–æ–º–µ—Ö (—Ä–µ–¥–∫–æ, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–Ω–æ)
    if (Math.random() < 0.02) {
      const stripY = Math.random() * canvas.height
      const stripHeight = 2 + Math.random() * 4
      
      ctx.fillStyle = 'rgba(255, 255, 255, 0.15)'
      ctx.fillRect(0, stripY, canvas.width, stripHeight)
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ü–≤–µ—Ç–Ω–æ–π —Å–±–æ–π
      ctx.fillStyle = 'rgba(0, 255, 100, 0.1)'
      ctx.fillRect(0, stripY + stripHeight, canvas.width, 1)
    }
    
    // 3. "–°–±–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏" - —Å–¥–≤–∏–≥ —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ (–æ—á–µ–Ω—å —Ä–µ–¥–∫–æ)
    if (Math.random() < 0.005) {
      const glitchY = Math.random() * canvas.height * 0.8
      const glitchHeight = 20 + Math.random() * 40
      const shift = (Math.random() - 0.5) * 10
      
      // –ö–æ–ø–∏—Ä—É–µ–º —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ –∏ —Å–¥–≤–∏–≥–∞–µ–º
      const imageData = ctx.getImageData(0, glitchY, canvas.width, glitchHeight)
      ctx.putImageData(imageData, shift, glitchY)
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω—É—é –ø–æ–ª–æ—Å—É –Ω–∞ –º–µ—Å—Ç–µ —Å–±–æ—è
      ctx.fillStyle = 'rgba(255, 0, 100, 0.1)'
      ctx.fillRect(0, glitchY, canvas.width, 2)
    }
    
    // 4. –ú–µ—Ä—Ü–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ (–≤–∞—Ä–∏–∞—Ü–∏—è —è—Ä–∫–æ—Å—Ç–∏)
    if (Math.random() < 0.1) {
      const flicker = 0.02 + Math.random() * 0.03
      ctx.fillStyle = `rgba(0, 150, 255, ${flicker})`
      ctx.fillRect(0, 0, canvas.width, canvas.height)
    }
    
    ctx.restore()

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∞–±–ª—å
    updateShip(gameState.ship, gameState.mouse.x, gameState.mouse.y, canvas)

    // –°–ø–∞–≤–Ω –º–µ—Ç–µ–æ—Ä–∏—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 0.8 —Å–µ–∫—É–Ω–¥—ã (–±–æ–ª—å—à–µ –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤!)
    if (now - gameState.lastMeteorSpawn > 800) {
      gameState.meteors.push(createMeteor(canvas))
      gameState.lastMeteorSpawn = now
    }

    // –ê–≤—Ç–æ—Å—Ç—Ä–µ–ª—å–±–∞
    autoShoot(gameState, now)

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–µ–æ—Ä–∏—Ç—ã
    gameState.meteors.forEach(meteor => {
      if (!meteor.active) return
      meteor.y += meteor.vy
      meteor.x += meteor.vx
      meteor.rotation += meteor.rotationSpeed
      
      // –£–¥–∞–ª—è–µ–º –º–µ—Ç–µ–æ—Ä–∏—Ç—ã –∑–∞ —ç–∫—Ä–∞–Ω–æ–º
      if (meteor.y > canvas.height + 50) {
        meteor.active = false
      }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–ª–∏
    gameState.bullets.forEach(bullet => {
      if (!bullet.active) return
      bullet.x += bullet.vx
      bullet.y += bullet.vy
      bullet.life--
      
      if (bullet.life <= 0 || 
          bullet.x < 0 || bullet.x > canvas.width ||
          bullet.y < 0 || bullet.y > canvas.height) {
        bullet.active = false
      }
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –ø—É–ª—è-–º–µ—Ç–µ–æ—Ä–∏—Ç
    gameState.bullets.forEach(bullet => {
      if (!bullet.active) return
      gameState.meteors.forEach(meteor => {
        if (!meteor.active) return
        
        const dx = bullet.x - meteor.x
        const dy = bullet.y - meteor.y
        const distance = Math.sqrt(dx * dx + dy * dy)
        
        if (distance < meteor.size + bullet.size) {
          // –ü–æ–ø–∞–¥–∞–Ω–∏–µ! üéØ
          bullet.active = false
          meteor.active = false
          gameState.explosions.push(createExplosion(meteor.x, meteor.y))
          gameState.asteroidsDestroyed++
          gameState.score += 10
          
          // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞
          gameState.lastScoreAnimation = now
          gameState.scoreAnimationScale = 1.5
        }
      })
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∑—Ä—ã–≤—ã
    gameState.explosions.forEach(explosion => {
      explosion.particles.forEach(particle => {
        particle.x += particle.vx
        particle.y += particle.vy
        particle.life--
        particle.vy += 0.1 // –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
      })
    })

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    drawShip(ctx, gameState.ship)
    
    gameState.meteors.forEach(meteor => {
      if (meteor.active) drawMeteor(ctx, meteor)
    })
    
    gameState.bullets.forEach(bullet => {
      if (bullet.active) drawBullet(ctx, bullet)
    })
    
    gameState.explosions.forEach(explosion => {
      drawExplosion(ctx, explosion)
    })

    // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    gameState.meteors = gameState.meteors.filter(m => m.active)
    gameState.bullets = gameState.bullets.filter(b => b.active)
    gameState.explosions = gameState.explosions.filter(e => 
      e.particles.some(p => p.life > 0)
    )

    // üéØ UI –≤ —Å—Ç–∏–ª–µ —Ä–µ—Ç—Ä–æ –∞—Ä–∫–∞–¥—ã
    ctx.save()
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å—á–µ—Ç—á–∏–∫–∞
    if (now - gameState.lastScoreAnimation < 300) {
      const animProgress = (now - gameState.lastScoreAnimation) / 300
      gameState.scoreAnimationScale = 1.5 - (animProgress * 0.5)
    } else {
      gameState.scoreAnimationScale = 1
    }
    
    // –°—á–µ—Ç—á–∏–∫ –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
    ctx.shadowColor = colors.primary
    ctx.shadowBlur = 4
    ctx.fillStyle = colors.primary
    ctx.font = `bold ${Math.floor(18 * gameState.scoreAnimationScale)}px monospace`
    ctx.textAlign = 'right'
    
    const counterText = `ASTEROIDS: ${gameState.asteroidsDestroyed}`
    ctx.fillText(counterText, canvas.width - 20, canvas.height - 20)
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç –æ—á–∫–æ–≤ —Å–≤–µ—Ä—Ö—É —Å–ª–µ–≤–∞ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
    ctx.textAlign = 'left'
    ctx.font = 'bold 14px monospace'
    ctx.fillText(`SCORE: ${gameState.score}`, 20, 25)
    
    ctx.restore()

    animationFrameRef.current = requestAnimationFrame(gameLoop)
  }, [updateShip, createMeteor, createBullet, createExplosion, autoShoot, drawShip, drawMeteor, drawBullet, drawExplosion, colors])

  // Mouse tracking
  const handleMouseMove = useCallback((event: MouseEvent) => {
    const canvas = canvasRef.current
    if (!canvas) return
    
    const rect = canvas.getBoundingClientRect()
    gameStateRef.current.mouse.x = event.clientX - rect.left
    gameStateRef.current.mouse.y = event.clientY - rect.top
  }, [])

  // Resize handler
  const handleResize = useCallback(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    
    canvas.width = window.innerWidth
    canvas.height = window.innerHeight
  }, [])

  // Setup
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    // Initial setup
    handleResize()
    
    // Event listeners
    window.addEventListener('resize', handleResize)
    window.addEventListener('mousemove', handleMouseMove)
    
    // Start game loop
    gameLoop()

    return () => {
      window.removeEventListener('resize', handleResize)
      window.removeEventListener('mousemove', handleMouseMove)
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current)
      }
    }
  }, [handleResize, handleMouseMove, gameLoop])

  return (
    <canvas
      ref={canvasRef}
      className="fixed inset-8 pointer-events-none z-5"
      style={{ 
        mixBlendMode: 'screen',
        opacity: 0.95,
        filter: 'contrast(1.3) brightness(1.2) saturate(1.1)',
        
        // üì∫ CRT –ú–û–ù–ò–¢–û–† –° –í–ò–î–ò–ú–û–ô –ü–ò–ö–°–ï–õ–¨–ù–û–ô –°–ï–¢–ö–û–ô
        background: `
          radial-gradient(ellipse 110% 100% at 50% 50%, 
            rgba(0, 150, 255, 0.08) 0%, 
            rgba(0, 100, 200, 0.06) 40%,
            rgba(0, 80, 160, 0.04) 70%,
            rgba(0, 50, 120, 0.06) 85%,
            rgba(0, 30, 80, 0.1) 100%
          )
        `,
        backgroundImage: `
          repeating-linear-gradient(
            0deg,
            transparent 0px,
            rgba(0, 220, 255, 0.15) 1px,
            transparent 2px,
            transparent 3px
          ),
          repeating-linear-gradient(
            90deg,
            transparent 0px,
            rgba(0, 180, 255, 0.1) 1px,
            transparent 2px,
            transparent 4px
          )
        `,
        backgroundSize: '100% 100%, 4px 4px, 6px 6px',
        
        // –≠—Ñ—Ñ–µ–∫—Ç –≤—ã–ø—É–∫–ª–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ-–ª—É—á–µ–≤–æ–π —Ç—Ä—É–±–∫–∏
        boxShadow: `
          inset 0 0 150px rgba(0, 200, 255, 0.08),
          inset 0 0 80px rgba(0, 150, 255, 0.1),
          inset 0 0 40px rgba(0, 100, 200, 0.12),
          0 0 25px rgba(0, 200, 255, 0.1),
          0 0 50px rgba(0, 150, 255, 0.06)
        `,
        
        // üî• –û–í–ê–õ–¨–ù–´–ô CRT –ú–û–ù–ò–¢–û–† 96% —Ä–∞–∑–º–µ—Ä–∞
        width: '96%',
        height: '93%',
        borderRadius: '6%',
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å—Ç–∞—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
        backgroundBlendMode: 'screen, overlay, normal',
        imageRendering: 'pixelated'  // –ø–∏–∫—Å–µ–ª—å–Ω–∞—è —á–µ—Ç–∫–æ—Å—Ç—å
      }}
    />
  )
}
