import { createClient } from './client'
import type { User, Session } from '@supabase/supabase-js'

export interface SignUpData {
  email: string
  password: string
  fullName?: string
  metadata?: Record<string, unknown>
}

export interface SignInData {
  email: string
  password: string
}

export interface AuthResult {
  user: User | null
  session: Session | null
}

// Enhanced error messages for better UX
const AUTH_ERROR_MESSAGES: Record<string, string> = {
  'Invalid login credentials': '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
  'Email not confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º',
  'Invalid email': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å',
  'Password should be at least 6 characters': '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤',
  'User not found': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
  'Too many requests': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
  'Email already registered': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
}

function formatAuthError(error: unknown): string {
  const message = (error instanceof Error ? error.message : null) || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
  return AUTH_ERROR_MESSAGES[message] || message
}

/**
 * Sign up a new user
 */
export async function signUp({ email, password, fullName, metadata }: SignUpData): Promise<AuthResult> {
  const supabase = createClient()
  
  if (process.env.NODE_ENV === 'development') {
    console.log('üîë signUp: starting registration', { email, fullName })
  }

  try {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          full_name: fullName || '',
          ...metadata
        },
      },
    })

    if (error) {
      throw new Error(formatAuthError(error))
    }

    if (process.env.NODE_ENV === 'development') {
      console.log('üîë signUp: success', { hasUser: !!data.user, needsConfirmation: !data.session })
    }

    return {
      user: data.user,
      session: data.session,
    }
  } catch (error) {
    if (process.env.NODE_ENV === 'development') {
      console.error('üîë signUp: error', error)
    }
    throw error
  }
}

/**
 * Sign in with email and password
 */
export async function signIn({ email, password }: SignInData): Promise<AuthResult> {
  const supabase = createClient()
  
  if (process.env.NODE_ENV === 'development') {
    console.log('üîë signIn: starting authentication', { email })
  }

  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    })

    if (error) {
      throw new Error(formatAuthError(error))
    }

    if (process.env.NODE_ENV === 'development') {
      console.log('üîë signIn: success', { hasUser: !!data.user, hasSession: !!data.session })
    }

    return {
      user: data.user,
      session: data.session,
    }
  } catch (error) {
    if (process.env.NODE_ENV === 'development') {
      console.error('üîë signIn: error', error)
    }
    throw error
  }
}

/**
 * Sign out current user
 */
export async function signOut(): Promise<void> {
  const supabase = createClient()
  
  if (process.env.NODE_ENV === 'development') {
    console.log('üîë signOut: starting sign out')
  }

  try {
    const { error } = await supabase.auth.signOut()

    if (error) {
      throw new Error(formatAuthError(error))
    }

    if (process.env.NODE_ENV === 'development') {
      console.log('üîë signOut: success')
    }
  } catch (error) {
    if (process.env.NODE_ENV === 'development') {
      console.error('üîë signOut: error', error)
    }
    throw error
  }
}

/**
 * Get current authenticated user
 */
export async function getCurrentUser(): Promise<User | null> {
  const supabase = createClient()
  
  try {
    const { data: { user }, error } = await supabase.auth.getUser()

    if (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('üîë getCurrentUser: error', error)
      }
      return null
    }

    return user
  } catch (error) {
    if (process.env.NODE_ENV === 'development') {
      console.error('üîë getCurrentUser: exception', error)
    }
    return null
  }
}

/**
 * Get current session
 */
export async function getCurrentSession(): Promise<Session | null> {
  const supabase = createClient()
  
  try {
    const { data: { session }, error } = await supabase.auth.getSession()

    if (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('üîë getCurrentSession: error', error)
      }
      return null
    }

    return session
  } catch (error) {
    if (process.env.NODE_ENV === 'development') {
      console.error('üîë getCurrentSession: exception', error)
    }
    return null
  }
}

/**
 * Reset password for user
 */
export async function resetPassword(email: string): Promise<void> {
  const supabase = createClient()
  
  if (process.env.NODE_ENV === 'development') {
    console.log('üîë resetPassword: sending reset email', { email })
  }

  try {
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${window.location.origin}/reset-password`,
    })

    if (error) {
      throw new Error(formatAuthError(error))
    }

    if (process.env.NODE_ENV === 'development') {
      console.log('üîë resetPassword: email sent successfully')
    }
  } catch (error) {
    if (process.env.NODE_ENV === 'development') {
      console.error('üîë resetPassword: error', error)
    }
    throw error
  }
}

/**
 * Update user password
 */
export async function updatePassword(newPassword: string): Promise<void> {
  const supabase = createClient()
  
  if (process.env.NODE_ENV === 'development') {
    console.log('üîë updatePassword: updating password')
  }

  try {
    const { error } = await supabase.auth.updateUser({
      password: newPassword
    })

    if (error) {
      throw new Error(formatAuthError(error))
    }

    if (process.env.NODE_ENV === 'development') {
      console.log('üîë updatePassword: password updated successfully')
    }
  } catch (error) {
    if (process.env.NODE_ENV === 'development') {
      console.error('üîë updatePassword: error', error)
    }
    throw error
  }
}